{"version":3,"sources":["hyerin.jpg","Note.js","Col.js","popup.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","selectedID","toggleCol1","selectNote","className","id","index","onClick","text","firstLine","split","formatTitle","date","year","Date","getFullYear","month","getMonth","day","getDate","formatDate","Col","popup","togglePopup","useState","colVisible","setColVisible","window","innerWidth","width","setWidth","useEffect","handleResize","addEventListener","removeEventListener","textarea","setTextarea","localStorage","getItem","notes","newID","JSON","parse","res","getNewID","noteState","setNoteState","setItem","stringify","forEach","i","console","log","invisibleCol1","alt","src","require","default","nextPossibleNotes","filter","seledtedID","tempID","length","type","placeholder","slice","reverse","map","concat","value","onChange","e","target","onBlur","getNewNote","children","Popup","popupVisible","setPopupState","preventTogglePopup","tempPopup","setTempPopup","unsetChange","name","required","email","location","preventDefault","App","image","setPopup","setPopupVisible","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c658916.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hyerin.38904c36.jpg\";","import React, {useState} from 'react'\n\nconst Note = ({note, selectedID, toggleCol1, selectNote}) => {\n    const formatDate = (date)=> {\n        date = new Date();\n        const year = date.getFullYear();\n        const month = date.getMonth()+ 1;\n        const day = date.getDate();\n        return `${month}/${day}/${year}`;\n        // console.log(\"formatDate performed\");\n    }\n    \n    const formatTitle = (text) => {\n        const firstLine = text.split(\"\\n\")[0];\n        if (firstLine === \"\"){\n            return \"New note\";\n        }\n        return firstLine;\n    }\n    // const [noteOpen, setNoteOpen] = useState(false);\n    // // 뒤로가기 하면 true\n    // // noteList click False\n\n\n\n    return(\n        <div className={(selectedID === note.id )? \"col1_note col1_note_selected\" : \"col1_note\"} \n            index = {note.id} onClick = { () => {selectNote(note.id); toggleCol1();}} >\n                {/* index = {note.id} onClick =  {()=>selectNote(note.id)}> */}\n            <div className=\"col1_text\"> {formatTitle(note.text)}</div>\n            {/* <div className=\"col1_textNote\" id=\"col1_textNote\" > {note.text}</div> */}\n            <div className=\"col1_date\" id=\"col1_date\" > {formatDate(note.date)} </div>\n        </div>\n    ) \n\n}\n\nexport default Note;  ","import React,{ useEffect, useState} from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Note from './Note';\n\n \n\n const Col = ({ popup, togglePopup }) => {\n\n    const [colVisible, setColVisible] = useState(true);\n\n    const [width, setWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n        function handleResize(){\n            setWidth(window.innerWidth);\n        }\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    const [textarea, setTextarea] = useState(\"\");\n\n    const getNewID = (notes) =>{\n        // console.log(\"note:\",notes);\n        let res = -1;\n        for (let note in notes){\n            // console.log(\"noteeach:\", note);\n            if (notes[note].id > res){\n                res = notes[note].id;\n            }\n        }\n        return res === -1 ? 0 : res + 1;\n    }\n\n    const [noteState, setNoteState] = useState( localStorage.getItem(\"noteData\") === null \n         ? { notes: [] , selectedID : null, newID : 0} \n         : { notes : JSON.parse(window.localStorage.getItem(\"noteData\")),\n            selectedID : null, \n            newID : getNewID(JSON.parse(window.localStorage.getItem(\"noteData\")))\n         }\n        )\n    useEffect(() => { window.localStorage.setItem(\"noteData\", JSON.stringify(noteState.notes)); }, [noteState]);\n\n    const index = (id ) =>{\n        let res = -1;\n        noteState.notes.forEach((note,i) => {\n            if (note.id === id){\n                res = i\n            }\n            return res;\n        })\n        console.log(\"index: \",res);\n        return res;\n    }\n    \n    // const toggleCol1= () => {\n    //     setColVisible(!colVisible);\n    // }\n\n    const visibleCol1 = () => {\n        console.log(\"visible\");\n        console.log(colVisible, width);\n        setColVisible(true);\n    }\n\n    const invisibleCol1 = () => {\n        console.log(colVisible, width);\n        setColVisible(false);\n    }\n\n    const addNote = () => {\n        setNoteState({...noteState,\n            notes : noteState.notes.concat({id : noteState.newID, text : \"\", date : new Date()}),\n            selectedID : noteState.newID,\n            newID : noteState.newID + 1,\n        })\n        setTextarea(\"\");\n        console.log(\"addNote performed\");\n    }\n    \n    \n    const editNote = () => {\n        const getNewNote = () => {\n            const res = noteState.notes.slice(0);\n            res[index(noteState.selectedID)].text = textarea;\n            return res;\n        }\n        setNoteState({\n            ...noteState,\n            notes:getNewNote(),\n        })\n    }\n    \n    const changeNote = (e) =>{\n        setTextarea(e.target.value)\n    }\n    \n    const deleteNote = () => {\n        if (noteState.selectedID < 0){\n            return;\n        }\n        const nextPossibleNotes = noteState.notes.filter( (note) => note.id < noteState.seledtedID );\n\n        const tempID = \n            (noteState.notes.length <= 1) ? null \n            : (nextPossibleNotes.length === 0 ) ? noteState.notes[0].id : nextPossibleNotes[nextPossibleNotes.length -1].id; \n        \n        setTextarea ( (index(tempID) === -1) ? \"\" : noteState.notes[index(tempID)].text)\n        setNoteState ({ ...noteState, notes : noteState.notes.filter((note) => note.id !== noteState.selectedID )})\n    }\n\n    const selectNote = (id) => { \n        setNoteState({...noteState, selectedID : id})\n        setTextarea( (index(id) !== -1) ? noteState.notes[index(id)].text : \"\");\n    }\n    \n return (\n    <div className = \"col\">\n        <div className = {/*colVisible ? \"col1 col1_show\" : */width > 500 ? \"col1\" : colVisible ? \"col1\" : \"col1 col1_notshow\"}>\n            <div className = \"col1_top\">\n                <img className = \"col1_image\" id =\"image\" alt = 'hyerin' src={require('./hyerin.jpg').default} onClick ={togglePopup}/> \n                <div className = \"col1_title\"> My notes </div>\n                <span className=\"material-icons col1_deleteBtn btn\" id = \"delete\" onClick = {deleteNote}>\n                    delete\n                </span>\n            </div>\n            <div className = \"col1_search\">\n                <span className=\"material-icons col1_searchBtn btn\" id=\"search\">search</span>\n                <input className=\"col1_inputSearch\" type=\"text\" placeholder=\"Search all notes\"/>\n            </div>\n            <div className=\"col1_noteList\" id=\"noteList\" >\n                {noteState.notes.slice(0).reverse().map((note) => {\n                    return (\n                        <Note key = {note.id} note = {note} selectedID = {noteState.selectedID} selectNote = {selectNote} toggleCol1 = {invisibleCol1} />\n                    )\n                })}\n            </div>\n        </div>\n        <div className = {/*!colVisible ? \"col2\" : window.innerWidth < 500 ? \"col2 col2_notshow\" : */width > 500 ? \"col2\" : colVisible ? \"col2 col2_notshow\" : \"col2\"}>\n            <div className = \"col2_top\">\n                <span className=\"material-icons col2_undoBtn\" id = \"undo\" onClick = {visibleCol1}>arrow_back</span>\n                <span className=\"material-icons col2_addBtn\" id=\"add\" onClick = {addNote}>note_add</span>\n            </div>\n            <div className = 'col2_note'>\n                <textarea className={(noteState.selectedID !== null ) ? \"col2_text col2_text_selected\" : \"col2_text\" } id = \"text\"\n                         value = {textarea} onChange= {changeNote} onBlur = {editNote}/>\n                <ReactMarkdown className = \"col2_markdown\" id = \"markdown\" children = {textarea}/>\n            </div>  \n        </div>  \n      </div>\n    )\n} \n\nexport default Col;","import React,{ useState} from \"react\";\n\nconst Popup = ({ popupVisible, popup, togglePopup, preventTogglePopup, setPopupState, }) =>  {\n    const [tempPopup, setTempPopup]= useState({...popup});\n\n    const onChange = (e) => {\n        setTempPopup({ ...tempPopup, [e.target.id]:e.target.value })\n    };\n\n    const unsetChange = () => {setTempPopup({ ...popup})};\n\n    return (\n        <div className = {popupVisible ? \"popup_bg popup_bg_show \" : \"popup_bg\"} id =\"popup_bg\" onClick ={ () => {unsetChange(); togglePopup();} } >\n            <div className = {popupVisible ? \"popup popup_show\" : \"popup\"} id =\"popup\" >\n\n                <form className = \"popup_form\" >\n                    <div className = \"popup_top\">\n                      <h2 className = \"logo\"> Edit Profile</h2>\n                        <span className=\"material-icons popup_exit btn\" id = \"close\"  onClick ={ () => {unsetChange(); togglePopup();} } >close</span>\n                    </div>\n                    <div className = \"popup_image\">\n                        <img className = \"popup_profileImage\" alt = 'hyerin' src={require('./hyerin.jpg').default} />\n                        <div className = \"btn\" id=\"newImage\"> Choose New Image</div>\n                        <div className = \"btn\" id=\"rmvImage\"> Remove Image </div>\n                    </div>\n    \n                    <div className = \"popup_info\">\n                        <div className = \"popup_name\">\n                            <div>Name</div>\n                            <input id= \"name\" className = \"input_info\" type=\"text\" placeholder=\"ex. John Doe\" value = {tempPopup.name} onChange = {onChange} required/>\n                        </div>\n                        <div className = \"popup_email\">\n                            <div>Email</div>\n                            <input id= \"email\" className = \"input_info\" type=\"text\" placeholder=\"ex. john.doe@stonybrook.edu\"  value = {tempPopup.email} onChange = {onChange} required/>\n                        </div>\n                        <div className = \"popup_loca\">\n                            <div>Location</div>\n                            <input id = \"location\" className = \"input_info\" type=\"text\" placeholder=\"ex. Songdo\" value = {tempPopup.location} onChange = {onChange} required />\n                        </div>\n                    </div>\n    \n                    <div className = \"popup_button\">\n                        <button className=\"popup_save btn\" id = \"save\" onClick = {(e) => {e.preventDefault(); setPopupState(tempPopup); togglePopup();}}> Save </button>\n                        <div className = \"popup_logout btn\" id = \"logout\" onClick = {(e) => {e.preventDefault(); unsetChange(); togglePopup(); } } > Logout </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Popup;\n\n","import './App.css';\nimport './index.js';\nimport Note from './Note';\nimport Col from './Col';\nimport Popup from './popup';\nimport React,{  useState} from 'react';\nimport ReactMarkdown from 'react-markdown'\n\nfunction App() {\n\n    const [ popup, setPopup] = useState(\n        window.localStorage.getItem(\"popupData\")=== null? {\n            name : \"\", email : \"\", location : \"\", image : \"./hyerin.jpg\"\n        }: JSON.parse(window.localStorage.getItem(\"popupData\"))\n    )\n\n    const setPopupState = (value) =>{\n        setPopup(value);\n        window.localStorage.setItem(\"popupData\", JSON.stringify(value));\n    }\n\n    const preventTogglePopup = (e) =>{\n        e.stopPropagation();\n    }\n\n    const [popupVisible, setPopupVisible]= useState(false);\n\n    const togglePopup = () => {\n        setPopupVisible(!popupVisible);\n    }\n\n    return (\n        <div>\n            <Popup popupVisible = {popupVisible} popup = {popup} togglePopup = {togglePopup} setPopupState = {setPopupState} />\n            <Col  popup = {popup} togglePopup = {togglePopup} setPopupState = {setPopupState} />\n        </div>\n    )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}