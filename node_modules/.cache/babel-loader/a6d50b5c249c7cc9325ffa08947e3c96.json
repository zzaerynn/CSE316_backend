{"ast":null,"code":"var _jsxFileName = \"/Users/zzaerynn/Desktop/CSE316/hw2-hyerinchoi/src/Col.js\";\nimport { React, Component, useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Add from './Note';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getNewID = notes => {\n  let res = -1;\n\n  for (let note in notes) {\n    if (notes[note].id > res) {\n      res = notes[note.id];\n    }\n  }\n\n  return res === -1 ? 0 : res + 1;\n};\n\nconst Col = ({\n  popup,\n  togglePopup\n}) => {\n  var _s = $RefreshSig$();\n\n  const Col = ({\n    popup,\n    togglePopup\n  }) => {\n    _s();\n\n    const [isVisible, setIsVisible] = useState(true);\n    const [textarea, setTextarea] = useState(\"\");\n    const [noteState, setNotestate] = useState(localStorage.getitem(\"noteData\") === null ? {\n      notes: [],\n      selectedID: null,\n      newID: 0\n    } : {\n      notes: JSON.parse(window.localStorage.getItem(\"noteData\")),\n      selectedID: null,\n      newID: getNewID(JSON.parse(window.localStorage.getItem(\"noteData\")))\n    });\n    useEffect(() => {\n      window.localStorage.setItem(\"noteData\", JSON.stringify(noteState.notes));\n    });\n\n    const formatDate = date => {\n      const year = date.getFullYear();\n      const month = date.getMonth();\n      const day = date.getDate();\n      return `${month}/${day}/${year}`;\n      console.log(\"formatDate performed\");\n    };\n\n    const index = id => {\n      let res = -1;\n      noteState.notes.forEach((note, i) => {\n        if (note.id === id) {\n          res = id;\n        }\n\n        return res;\n      });\n      console.log(\"Index performed\");\n    };\n\n    const toggleList = () => {\n      setIsVisible(!isVisible);\n    };\n\n    const Note = ({\n      note,\n      selectedID,\n      selectNote,\n      toggleList\n    }) => {\n      const formatTitle = text => {\n        const showLine = text.split(\"\\n\")[0];\n\n        if (showLine === \"\") {\n          return \"new note\";\n        }\n\n        return showLine;\n      };\n\n      console.log(\"Note performed\");\n    };\n\n    const addNote = () => {\n      setNoteState({ ...noteState,\n        notes: noteState.notes.concat({\n          id: noteState.newID,\n          text: \"\",\n          date: new Date()\n        }),\n        selectedID: noteState.newID,\n        newID: noteState.newID\n      });\n      setTextarea(\"\");\n      console.log(\"addNote performed\");\n    };\n\n    const editNote = () => {\n      const getNewNote = () => {\n        const result = noteState.notes.slice(0);\n        result[index(noteState.selectedID)].text = textarea;\n        return result;\n      };\n\n      setNoteState({ ...noteState,\n        notes: getNewNote()\n      });\n    };\n\n    const changeNote = e => {\n      setTextarea(e.target.value);\n    };\n\n    const deleteNote = () => {\n      if (noteState.selectedID < 0) {\n        return;\n      }\n\n      const nextNote = noteState.notes.filter(note => note.id < noteState.seledtedID); // const tempID = \n      //     // ((noteState.notes.length === 0) && (nextPossibleNotes.length === 0))?\n      //     (noteState.notes.length === 0)\n      //     ? \n      //     : (nextPossibleNotes.length === 0 ) ? : \n      //     console.log(\"deleteNote performed\");\n    };\n\n    const selectNote = id => {\n      setNoteState({ ...noteState,\n        selectedID: id\n      });\n      setTextarea(index(id) != -1 ? noteState.notes[index(id)].text : \"\");\n    };\n\n    return (\n      /*#__PURE__*/\n      // <div className = \"all\">\n      _jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col1\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col1_top\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"col1_image\",\n              id: \"image\",\n              alt: \"hyerin\",\n              src: require('./hyerin.jpg').default\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col1_title\",\n              children: \" My notes \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons col1_deleteBtn btn\",\n              id: \"delete\",\n              children: \"delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col1_search\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons col1_searchBtn btn\",\n              id: \"search\",\n              children: \"search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"col1_inputSearch\",\n              type: \"text\",\n              placeholder: \"Search all notes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col1_noteList\",\n            id: \"noteList\",\n            children: noteState.notes.slice(0).reverse().map(note => {\n              return /*#__PURE__*/_jsxDEV(Note, {\n                note: note,\n                selectedID: noteState.selectedID,\n                selectNote: selectNote,\n                toggleList: toggleList\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 25\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col2_top\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons col2_undoBtn\",\n              id: \"undo\",\n              onClick: toggleList,\n              children: \"arrow_back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons col2_addBtn\",\n              id: \"add\",\n              onClick: addNote,\n              children: \"note_add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col2_note\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"col2_text\",\n              id: \"text\",\n              value: textarea,\n              onChange: changeNote,\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              className: \"col2_markdown\",\n              id: \"markdown\",\n              children: textarea,\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this) // </div>\n\n    );\n  }; //  }; \n\n\n  _s(Col, \"tf57H/by06MQGp29q7qFeU1or8I=\");\n};\n\n_c = Col;\nexport default Col;\n\nvar _c;\n\n$RefreshReg$(_c, \"Col\");","map":{"version":3,"sources":["/Users/zzaerynn/Desktop/CSE316/hw2-hyerinchoi/src/Col.js"],"names":["React","Component","useEffect","useState","ReactMarkdown","Add","getNewID","notes","res","note","id","Col","popup","togglePopup","isVisible","setIsVisible","textarea","setTextarea","noteState","setNotestate","localStorage","getitem","selectedID","newID","JSON","parse","window","getItem","setItem","stringify","formatDate","date","year","getFullYear","month","getMonth","day","getDate","console","log","index","forEach","i","toggleList","Note","selectNote","formatTitle","text","showLine","split","addNote","setNoteState","concat","Date","editNote","getNewNote","result","slice","changeNote","e","target","value","deleteNote","nextNote","filter","seledtedID","require","default","reverse","map"],"mappings":"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","sourcesContent":["import {React, Component, useEffect, useState} from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Add from './Note';\n\n\nconst getNewID = (notes) =>{\n    let res = -1;\n    for (let note in notes){\n        if (notes[note].id > res){\n            res = notes[note.id];\n        }\n    }\n    return res === -1 ? 0 : res + 1;\n}\n\nconst Col = ({popup, togglePopup }) =>{\n const Col = ({ popup, togglePopup }) => {\n    const [isVisible, setIsVisible] = useState(true);\n    const [textarea, setTextarea] = useState(\"\");\n     const [noteState, setNotestate] = useState( localStorage.getitem(\"noteData\") === null \n         ? { notes: [] , selectedID : null, newID : 0} \n         : { notes : JSON.parse(window.localStorage.getItem(\"noteData\")),\n            selectedID : null, \n            newID : getNewID(JSON.parse(window.localStorage.getItem(\"noteData\")))\n         }\n        )\n    useEffect(() => {\n        window.localStorage.setItem(\"noteData\", JSON.stringify(noteState.notes));\n    });\n    const formatDate = (date)=> {\n        const year = date.getFullYear();\n        const month = date.getMonth();\n        const day = date.getDate();\n        return `${month}/${day}/${year}`;\n        console.log(\"formatDate performed\");\n    } \n    const index = (id ) =>{\n        let res = -1;\n        noteState.notes.forEach((note,i) => {\n            if (note.id === id){\n                res = id\n            }\n            return res;\n        })\n        console.log(\"Index performed\");\n    }\n    \n    const toggleList = () => {\n        setIsVisible(!isVisible);\n    }\n    \n    const Note = ({note, selectedID, selectNote, toggleList}) => {\n        const formatTitle = (text) =>{\n            const showLine = text.split (\"\\n\")[0];\n            if(showLine === \"\"){\n                return \"new note\";\n            }\n            return showLine\n        }\n        console.log(\"Note performed\");\n    }\n    \n    const addNote = () => {\n        setNoteState({\n            ...noteState,\n            notes : noteState.notes.concat({\n                id : noteState.newID,\n                text : \"\",\n                date : new Date(),\n            }),\n            selectedID : noteState.newID,\n            newID : noteState.newID\n        })\n        setTextarea(\"\");\n        console.log(\"addNote performed\");\n    }\n    \n    \n    const editNote = () => {\n        const getNewNote = () => {\n            const result = noteState.notes.slice(0);\n            result [index(noteState.selectedID)].text = textarea;\n            return result;\n        }\n        setNoteState({\n            ...noteState,\n            notes:getNewNote(),\n        })\n    }\n    \n    const changeNote = (e) =>{\n        setTextarea(e.target.value)\n    }\n    \n    const deleteNote = () => {\n        if (noteState.selectedID < 0){\n            return;\n        }\n        const nextNote = noteState.notes.filter(\n            (note) => note.id < noteState.seledtedID\n        );\n        // const tempID = \n        //     // ((noteState.notes.length === 0) && (nextPossibleNotes.length === 0))?\n        //     (noteState.notes.length === 0)\n        //     ? \n        //     : (nextPossibleNotes.length === 0 ) ? : \n        //     console.log(\"deleteNote performed\");\n    }\n    \n    const selectNote = (id) => {\n        setNoteState({\n            ...noteState,\n            selectedID : id,\n        })\n        setTextarea(index(id) != -1 ? noteState.notes[index(id)].text : \"\")\n    }\n    \n \n\n return (\n    // <div className = \"all\">\n    <div className = \"col\">\n        <div className = \"col1\">\n            <div className = \"col1_top\">\n                <img className = \"col1_image\" id =\"image\" alt = 'hyerin' src={require('./hyerin.jpg').default}/> \n                <div className = \"col1_title\"> My notes </div>\n                <span className=\"material-icons col1_deleteBtn btn\" id = \"delete\">delete</span>\n            </div>\n            <div className = \"col1_search\">\n                <span className=\"material-icons col1_searchBtn btn\" id=\"search\">search</span>\n                <input className=\"col1_inputSearch\" type=\"text\" placeholder=\"Search all notes\"/>\n            </div>\n            <div className=\"col1_noteList\" id=\"noteList\" >\n                {noteState.notes.slice(0).reverse().map((note) => {\n                    return (\n                        <Note note = {note} selectedID = {noteState.selectedID} selectNote = {selectNote} toggleList = {toggleList} />\n                    )\n                })}\n            </div>\n        </div>\n        <div className = \"col2\">\n            <div className = \"col2_top\">\n                <span className=\"material-icons col2_undoBtn\" id = \"undo\" onClick = {toggleList}>arrow_back</span>\n                <span className=\"material-icons col2_addBtn\" id=\"add\" onClick = {addNote}>note_add</span>\n            </div>\n            <div className = 'col2_note'>\n                <textarea className=\"col2_text\" id = \"text\"\n                value = {textarea} onChange= {changeNote}> </textarea>\n                <ReactMarkdown className = \"col2_markdown\" id = \"markdown\" children = {textarea}> </ReactMarkdown>\n            </div>  \n        </div>  \n      </div>\n    // </div>\n    )\n\n\n};\n//  }; \n}\nexport default Col;"]},"metadata":{},"sourceType":"module"}